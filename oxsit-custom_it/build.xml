<!-- BEGIN LICENSE BLOCK ************************************************* 
  Version: EUPL 1.1/GPL 3.0
  
  The contents of this file are subject to the EUPL, Version 1.1 or 
  - as soon they will be approved by the European Commission - 
  subsequent versions of the EUPL (the "Licence");
  you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.osor.eu/eupl/european-union-public-licence-eupl-v.1.1
 
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
 
  The Original Code is /oxsit-custom_it/build.xml.
 
  The Initial Developers of the Original Code are
  Giuseppe Castagno giuseppe.castagno@acca-esse.it
  Roberto Resoli resoli@osor.eu
  
  Portions created by the Initial Developers are Copyright (C) 2009-2011
  the Initial Developer. All Rights Reserved.
 
  Contributor(s):
 
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 3 or later (the "GPL")
  in which case the provisions of the GPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of the GPL, and not to allow others to
  use your version of this file under the terms of the EUPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the GPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the EUPL, or the GPL.    
*************** END LICENSE BLOCK ***********************************  -->

<!--
add comments here.........

ATTENTION:
the default target must be removed

-->
<project name="oxsit-custom_it" default="build-jar" basedir=".">
	<property name="project_friendly_name" value="oxsit" />	
	<property name="project_name" value="${project_friendly_name}-custom_it" />
	<property name="extension_jar_file" value="${project_name}.uno.jar" />
	<description>
        Build the jar file ${extension_jar_file} (custom Italian adaptation).
    </description>
	<echo>Build the jar file ${extension_jar_file}.</echo>
	<!-- set global properties for this build -->

	<!--
	grab option file for platform 
	platform file are:
	Linux: build.Linux-i386.properties
	-->
	<echo message="${project_name}: platform specific file is: build.${os.name}-${os.arch}.properties.xml."/>
	<property file="build.${os.name}-${os.arch}.properties.xml" />
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="build-eclipse" location="bin"/>
	<property name="dist" location="dist" />

	<!-- ${src}/../../${project_friendly_name}-sig_opt_uno/lib-->
	<property name="lib" location="${src}/../../${project_friendly_name}-sig_opt_uno/lib" />

	<!-- ROB BC libs names -->
	<property name="bcmail_jar" value="bcmail-jdk16-146.jar"/>
	<property name="bcprov_jar" value="bcprov-jdk16-146.jar"/>

	<property name="bctsp_jar" value="bctsp-jdk16-146.jar"/>
	
	<!--
		the OOo SDK root path, used for the custom loader
		edit to suit your installation

	 The variable ooosdk should be set in the Eclipse IDE, Ant variables, or in a
	 build.${os.name}-${os.arch}.properties file.
	 See README file in doc project.
	-->
	
	<!-- temporarily disabled, no need it seems..
	 property name="ooosdk" value="$ooosdk" />	
	<available file="${ooosdk}" type="dir" property="ooosdk.available" value="false" />
	<fail message="No OOo sdk available. Please edit the file build.${os.name}-${os.arch}.properties to correct it.">
		<condition>
			<not>
				<isset property="ooosdk.available" />
			</not>
		</condition>
	</fail -->
		
	<!--
	 The variable ooo_ure_classes_path should be set in the Eclipse IDE, Ant variables, or in a
	 build.${os.name}-${os.arch}.properties file.
	 See README file in doc project.
	-->
	<property name="ooo_ure_classes_path" value="$ooo_ure_classes_path" />
	<available file="${ooo_ure_classes_path}" type="dir" property="ooo_classes_path.available" value="false" />
	<fail message="No OOo URE classes available. Please edit the file build.${os.name}-${os.arch}.properties to correct it.">
		<condition>
			<not>
				<isset property="ooo_classes_path.available" />
			</not>
		</condition>
	</fail>

	<!--
	 The variable ooo_classes_path should be set in the Eclipse IDE, Ant variables, or in a
	 build.${os.name}-${os.arch}.properties file.
	 See README file in doc project.
	 -->
	<property name="ooo_classes_path" value="$ooo_classes_path" />
	<available file="${ooo_classes_path}" type="dir" property="ooo_classes_path.available" value="false" />
	<fail message="No OOo classes available. Please edit the file build.${os.name}-${os.arch}.properties to correct it.">
		<condition>
			<not>
				<isset property="ooo_classes_path.available" />
			</not>
		</condition>
	</fail>

	<!-- directory to zip for archive -->
	<property name="archr" location="to-be-zipped" />
	<property name="arch" location="${archr}/${project_name}-${version}" />

	<!-- dependset>
		<srcfilelist dir="${xades_myclass_path}" files="signature_component.uno.jar" />
		<targetfilelist dir="${dist}/lib" files="${extension_jar_file}" />
	</dependset -->

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->

		<!-- new UNO Java type classes -->
		<property name="my_uno_types_path" value="${src}/../../${project_friendly_name}-uno_types/dist/lib" />
		<available file="${my_uno_types_path}" type="dir" property="my_uno_types_path.available" value="false" />
		<fail message="No ${project_friendly_name}-uno_types classes available. Please edit the build file to correct it.(${my_uno_types_path})">
			<condition>
				<not>
					<isset property="my_uno_types_path.available" />
				</not>
			</condition>
		</fail>

		<property name="my_ooo_classes_path3" value="${src}/../../${project_friendly_name}-sig_opt_uno/dist/lib" />
		<available file="${my_ooo_classes_path3}" type="dir" property="my_ooo_classes_path3.available" value="false" />
		<fail message="No ${project_friendly_name}-sig_opt_uno classes available. Please edit the build file to correct it. (${my_ooo_classes_path3})">
			<condition>
				<not>
					<isset property="my_ooo_classes_path3.available" />
				</not>
			</condition>
		</fail>
		<echo>"${my_ooo_classes_path3}/${project_friendly_name}-sig_opt_uno.uno.jar"</echo>
		<property name="bc_classes_path" value="${lib}" />
		<available file="${bc_classes_path}" type="dir" property="bc_classes_path.available" value="false" />
		<fail message="No ${project_friendly_name}-sig_opt_uno classes available. Please edit the build file to correct it. (${bc_classes_path})">
			<condition>
				<not>
					<isset property="bc_classes_path.available" />
				</not>
			</condition>
		</fail>
		<javac  debug="true" target="1.6" srcdir="${src}" destdir="${build}" deprecation="true">
			<classpath>
				<pathelement path="${ooo_ure_classes_path}/juh.jar" />
				<pathelement path="${ooo_ure_classes_path}/jurt.jar" />
				<pathelement path="${ooo_ure_classes_path}/ridl.jar" />
				<pathelement path="${ooo_classes_path}/unoil.jar" />
				<pathelement path="${my_uno_types_path}/${project_friendly_name}-uno_types.uno.jar" />
				<pathelement path="${my_ooo_classes_path3}/${project_friendly_name}-sig_opt_uno.uno.jar" />
				<pathelement path="${bc_classes_path}/${bcmail_jar}" />
				<pathelement path="${bc_classes_path}/${bcprov_jar}" />
				<pathelement path="${bc_classes_path}/${bctsp_jar}" />
			</classpath>
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<!--
			copy helper classes from OOo SDK
			Disable the whole section if the stand alone capability is not needed
		-->
		<!-- copy todir="${build}" failonerror="false">
			<fileset dir="${ooosdk}/classes">
				<include name="**/*" />
			</fileset>
		</copy -->	
		<!-- end of copy helper classes from OOo SDK -->

		<!--
			copy interface classes
		-->
		<!-- copy todir="${build}" failonerror="true">
			<fileset dir="${basedir}/class-lib">
				<include name="**/*" />
			</fileset>
		</copy -->
		<!-- end of copy idlc generated classes -->
	</target>

	<target name="build-jar" depends="compile" description="generate the specific Italian signature UNO components.">
		<exec dir="." executable="${svn_revision_script}"
	   		outputproperty="svn.revision.number">
	   	</exec>
	   	<echo>${extension_jar_file} SVN Revision Number ${svn.revision.number}, version ${version}, spec version: ${spec_version}</echo>
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}/lib" />

		<!-- Put everything in ${build} into the .jar file -->
		<jar jarfile="${dist}/lib/${extension_jar_file}" basedir="${build}">
			<!-- build the manifest file on-line -->
			<manifest>
				<attribute name="Built-By" value="https://forge.osor.eu/projects/ooo-xadessig-it" />
				<attribute name="Specification-Title" value="Firma digitale XAdES" />
				<attribute name="Specification-Version" value="${spec_version}" />
				<attribute name="Specification-Vendor" value="http://www.yacme.com" />
				<attribute name="Implementation-Title" value="${project_name}, parte di implementazione specifica per l'Italia" />
				<attribute name="Implementation-Version" value="${TODAY}, Vers. ${version}-r${svn.revision.number}" />
				<attribute name="Implementation-Vendor" value="http://www.yacme.com" />
				<attribute name="Ant-Version" value="${ant.version}" />
				<attribute name="UNO-Type-Path" value="" />
				<attribute name="RegistrationClassName" value="com.yacme.ext.oxsit.cust_it.RegisterServices" />
				<!-- attribute name="RegistrationClassName" value="com.yacme.ext.oxsit.cust_it.RegisterServices" / -->
				<attribute name="Class-Path" value="${project_friendly_name}-sig_opt_uno.uno.jar ${bcmail_jar} ${bcprov_jar} ${bctsp_jar}"/> 
			</manifest>
		</jar>
	</target>

	<!-- dependency of description.xml from build number -->
	<dependset>
		<srcfilelist dir="${basedir}" files="build.number" />
		<targetfilelist dir="${extension_dest_dir}" files="description.xml" />
	</dependset>

	<target name="clean" description="clean up the project">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${archr}" />
		<delete dir="${build-eclipse}" />
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<delete dir="${extension_dest_dir}" />
	</target>

</project>
