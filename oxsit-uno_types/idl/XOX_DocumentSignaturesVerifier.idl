/*************************************************************************
 * 
 *  Copyright 2009 by Giuseppe Castagno beppec56@openoffice.org
 *  
 *  The Contents of this file are made available subject to
 *  the terms of European Union Public License (EUPL) version 1.1
 *  as published by the European Community.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the EUPL.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  EUPL for more details.
 *
 *  You should have received a copy of the EUPL along with this
 *  program.  If not, see:
 *  https://www.osor.eu/eupl, http://ec.europa.eu/idabc/eupl.
 *
 ************************************************************************/

#ifndef __com_yacme_ext_oxsit_security_cert_XOX_DocumentSignaturesVerifier_idl__
#define __com_yacme_ext_oxsit_security_cert_XOX_DocumentSignaturesVerifier_idl__

#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/uno/Exception.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/uno/XComponentContext.idl> 
#include <com/sun/star/uno/XInterface.idl> 
#include <com/sun/star/embed/XStorage.idl> 
#include <com/sun/star/frame/XFrame.idl>
#include <com/sun/star/frame/XModel.idl>
#include "CertificateState.idl"
#include "CertificateStateConditions.idl"
#include "XOX_X509Certificate.idl"
#include "XOX_SignatureState.idl"

  module com { module yacme { module ext { module oxsit { module security {

/** Interface to implement document signer.
 */
	interface XOX_DocumentSignaturesVerifier
	{
	  /** The certificates this document contains. One for each signature
		*/
	  /*		[attribute,readonly]  sequence<com::yacme::ext::oxsit::security::cert::XOX_X509Certificate> X509Certificates;*/

		/** The signatures this document contains
		*/
	  [attribute,readonly]  sequence<com::yacme::ext::oxsit::security::XOX_SignatureState> SignatureStates;

	  /** Load the certificates from the signatures of the gived document.
	      Must be called to register the signatures present, before doing anything else.<br>
	   * @param xFrame the frame to be used as anchor for dialogs
	   * @param xTheDocument the model of the document from which the signature certificates should loaded
           * @return the sequence of the certificates found or null if no certificates (then no signatures)
	   */
	  sequence<com::yacme::ext::oxsit::security::XOX_SignatureState> loadAndGetSignatures([in] com::sun::star::frame::XFrame xFrame,
											      [in] com::sun::star::frame::XModel xTheDocumentModel )
	    raises( ::com::sun::star::lang::IllegalArgumentException,
		    ::com::sun::star::uno::Exception );

	/** Used to check if the signed document is untampered and if the signature itself is correct.
	    Should be called AFTER loadAndGetSignatures has been called !<br>
		@param xFrame the frame to be used as anchor for dialogs
		@param xTheDocument the model of the document to be verified
		@param xSignatureState the state of the signature to be checked. If null all the signatures will be checked.
		If not null, the state is updated and the coresponding csigner certificate is checked as well.
   		@return In case sSignatureUUID is null, returns the aggregate state of the document signatures, else returns the state of the signature checked.
		*/
	  long verifyDocumentSignatures([in] com::sun::star::frame::XFrame xFrame,
					[in] com::sun::star::frame::XModel xTheDocumentModel,
					[in] com::yacme::ext::oxsit::security::XOX_SignatureState xSignatureState )
	    raises( ::com::sun::star::lang::IllegalArgumentException,
		    ::com::sun::star::uno::Exception );

	/** Used to remove the selected signature or all the signatures.<br>
		@param xFrame the frame to be used as anchor for dialogs
		@param xTheDocument the model of the document to be verified
		@param sSignatureUUID The UUID of the signature to be removed. If null all the signatures will be removed.
		@return true if the document can be signed, false otherwise.
		*/
	  boolean removeDocumentSignature([in] com::sun::star::frame::XFrame xFrame,
					  [in] com::sun::star::frame::XModel xTheDocumentModel,
					  [in] string sSignatureUUID )
	    raises( ::com::sun::star::lang::IllegalArgumentException,
		    ::com::sun::star::uno::Exception );
	} ;

  }; }; }; }; };
 
#endif

