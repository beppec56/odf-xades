/*************************************************************************
 * 
 *  Copyright 2009 by Giuseppe Castagno beppec56@openoffice.org
 *  
 *  The Contents of this file are made available subject to
 *  the terms of European Union Public License (EUPL) version 1.1
 *  as published by the European Community.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the EUPL.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  EUPL for more details.
 *
 *  You should have received a copy of the EUPL along with this
 *  program.  If not, see:
 *  https://www.osor.eu/eupl, http://ec.europa.eu/idabc/eupl.
 *
 ************************************************************************/

#ifndef __it_plio_ext_oxsit_security_cert_XOX_X509CertificateDisplay_idl__
#define __it_plio_ext_oxsit_security_cert_XOX_X509CertificateDisplay_idl__

#include <com/sun/star/util/DateTime.idl>
#include <com/sun/star/uno/Exception.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/frame/XFrame.idl>
#include "XOX_CertificateExtension.idl"
#include "CertificateState.idl"
#include "CertificationAuthorityState.idl"
#include "XOX_CertificationPathControlProcedure.idl"
#include "XOX_CertificateComplianceControlProcedure.idl"
#include "XOX_CertificateRevocationStateControlProcedure.idl"

  module it { module plio { module ext { module oxsit { module security { module cert {

/** Interface of a Qualified X509 Certificate
<p>The certificate accessed through this interface can only be created in two ways:</p>
<p>by instantiating an AvailableSSCDs service and callig the scanDevices() method of its
XOX_AvailableSSCDs interface or</p>
<p>by opening an ODF document that contains one it it in its XAdES signature.</p>
<p>See service QualifiedCertificate for details.</p>
 */
	interface XOX_X509CertificateDisplay
	{
		/** the DER encoded form of the certificate.
		 */
		[attribute, readonly] sequence< byte > DEREncoded ;
		/** the human readable rapresentation of the holder (subject) of this certificate.
		<p>This string is formed from the SubjectDN certificate field in the following way:</p>
		<p>If givenName and surname both exist, they are used togeter to form a string in the form of
		givenName+" "+surname</p>
		<p>if they both don't exist, then the commonName attribute is used</p>
		<p>if common name doesn't exist, then pseudonym is used</p>
		<p>If nothing of this exists, the entire subjectDN file is returned, same as for SubjectName below.</p>
	 	*/
		[attribute, readonly] string SubjectDisplayName ;
		/** the human readable representation of the version number attribute of the certificate.
	 	*/
		[attribute, readonly] string Version ;
		/** the human readable rapresentation of the serial number attribute of the certificate.
		 */
		[attribute, readonly] string SerialNumber ;
		/** The short version of the issuer name
		*/
		[attribute, readonly] string IssuerDisplayName ;
		/** the full issuer name attribute of the certificate.
		 */
		[attribute, readonly] string IssuerName ;
		/** the full subject name attribute of the certificate.
		*/
		[attribute, readonly] string SubjectName ;
		/** the validity NotBefore date attribute of the certificate.
		 */
		[attribute, readonly] string NotValidBefore ;
		/** the validity NotAfter date attribute of the certificate.
		 */
		[attribute, readonly] string NotValidAfter ;
		/** the human readable rapresentation of the algorithm of the subject public key
		 */
		[attribute, readonly] string SubjectPublicKeyAlgorithm;
		/** the human readable rapresentation of the value of the subject public key
		 */
		[attribute, readonly] string SubjectPublicKeyValue;
		/** the human readable rapresentation of the signature algorithm
		 */
		[attribute, readonly] string SignatureAlgorithm;
		/** the human readable rapresentation of the SHA1 thumbprint of the certificate.
		<p>It's computed by calculating the SHA1 digest of the DER encoded form of the entire certificate.</p>
		*/
		[attribute, readonly] string SHA1Thumbprint;
		/** the human readable rapresentation of the MD5 thumbprint of the certificate.
		<p>It's computed by calculating the MD5 digest of the DER encoded form of the entire certificate.</p>
		*/
		[attribute, readonly] string MD5Thumbprint;

		/** all the OIDs strings of the certificate extensions 
		*/
		[attribute, readonly] sequence<string> CertificateExtensionOIDs;

		/** all the OIDs strings of the certificate extensions marked critical 
		*/
		[attribute, readonly] sequence<string> CriticalCertificateExtensionOIDs;
		/** all the OIDs strings of the certificate extensions not marked critical
		*/
		[attribute, readonly] sequence<string> NotCriticalCertificateExtensionOIDs;

		/** Returns all the critical extensions.
		<p></p>
		*/
		sequence<it::plio::ext::oxsit::security::cert::XOX_CertificateExtension> getCriticalExtensions();

		/** Returns all the Not critical extensions.
		<p></p>
		*/
		sequence<it::plio::ext::oxsit::security::cert::XOX_CertificateExtension> getNotCriticalExtensions();

		/** Find the localized name of an extension from OID.
		<p>the OID should be in string form, for example the string "2.5.29.15" for KeyUsage extension</p>
		*/
		string getCertificateExtensionName( [in] string oid ) ;

		/** Returns the human redeable content of an extension from OID.
		<p>the OID should be in string form, for example the string "2.5.29.15" for KeyUsage extension</p>
		*/
		string getCertificateExtensionStringValue( [in] string oid ) ;

		/**
		@param DEREncoded the DER byte stream of the certificate to render in text.
		*/
		boolean prepareDisplayData( [in] sequence< byte > DEREncoded );

	} ;

  }; }; }; }; };  };
 
#endif
