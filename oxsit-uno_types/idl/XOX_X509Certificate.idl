/*************************************************************************
 * 
 *  Copyright 2009 by Giuseppe Castagno beppec56@openoffice.org
 *  
 *  The Contents of this file are made available subject to
 *  the terms of European Union Public License (EUPL) version 1.1
 *  as published by the European Community.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the EUPL.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  EUPL for more details.
 *
 *  You should have received a copy of the EUPL along with this
 *  program.  If not, see:
 *  https://www.osor.eu/eupl, http://ec.europa.eu/idabc/eupl.
 *
 ************************************************************************/

#ifndef __it_plio_ext_oxsit_security_cert_XOX_X509Certificate_idl__
#define __it_plio_ext_oxsit_security_cert_XOX_X509Certificate_idl__

#include <com/sun/star/util/DateTime.idl>
#include <com/sun/star/uno/Exception.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/frame/XFrame.idl>
#include "XOX_CertificateExtension.idl"
#include "CertificateState.idl"
#include "CertificateStateConditions.idl"
#include "CertificationAuthorityState.idl"
#include "XOX_CertificationPathProcedure.idl"
#include "XOX_CertificateComplianceProcedure.idl"
#include "XOX_CertificateRevocationStateProcedure.idl"
#include "XOX_X509CertificateDisplay.idl"

  module it { module plio { module ext { module oxsit { module security { module cert {

/** Interface of a Qualified X509 Certificate
<p>The certificate accessed through this interface can only be created in two ways:</p>
<p>by instantiating an AvailableSSCDs service and callig the scanDevices() method of its
XOX_AvailableSSCDs interface or</p>
<p>by opening an ODF document that contains one it it in its XAdES signature.</p>
<p>See service QualifiedCertificate for details.</p>
 */
	interface XOX_X509Certificate
	{
		/** the DER encoded form of the certificate.
		 */
		[attribute] sequence< byte > DEREncoded ;
		/** the state of the certificate, for general and string indications.
		<p>It's an integer in the form of <type scope="it::plio::ext::module::oxsit::security::cert">CertificateState</type>, the numerical value,
		not the enum (e.g. CertificateState.OK_value).</p>
		
	 	*/
		/* @see it::plio::ext::module::oxsit::security::cert::CertificateState
		*/
		[attribute, readonly] long CertificateState;
		/** conditions observed in checking the certificate state
		*/
		[attribute, readonly] long CertificateStateConditions;
		/** the state of the CA (Certification Authority) control.
	 	*/
		[attribute, readonly] long CertificationAuthorityState;
		/** the object used to control the certification path of this certificate
		*/
		[attribute, readonly] it::plio::ext::oxsit::security::cert::XOX_CertificationPathProcedure CertificationPathControlObj;

		/** the object used to control the certificate revocation state, CRL or OCSP
		*/
		[attribute, readonly] it::plio::ext::oxsit::security::cert::XOX_CertificateRevocationStateProcedure RevocationControlObj;

		/** the object used to control the certificate compliance
		*/
		[attribute, readonly] it::plio::ext::oxsit::security::cert::XOX_CertificateComplianceProcedure ComplianceControlObj;

		/** the object used to prepare the certificate display
		*/
		[attribute, readonly] it::plio::ext::oxsit::security::cert::XOX_X509CertificateDisplay CertificateDisplayObj;

		/** The first certificate in the certification path, this is the start of the certification path
		tree.
		*/
		[attribute] it::plio::ext::oxsit::security::cert::XOX_X509Certificate CertificationPath ;

		/** Returns the error state of an extension, in value of
		it.plio.ext.oxsit.security.cert.CertificateExtensionState.<>_value
		<p>the OID should be in string form, for example the string "2.5.29.15" for KeyUsage extension</p>
		<p>For the certificate item that don't have an OID, use the certificate element name; for example IssuerName will
		return the state of the check performed on issuerName element of TBSCertificate</p> 
		*/
		long getCertificateElementErrorState( [in] string oid ) ;

		/** Set the error state of an extension, in value of
		it.plio.ext.oxsit.security.cert.CertificateExtensionState.<>_value
		<p>the OID should be in string form, for example the string "2.5.29.15" for KeyUsage extension</p>
		*/
		void setCertificateElementErrorState( [in] string oid, [in] long newState) ;

		/** Set the interface objects used for the certificate compliance control procedure.
		<p>This interface is used internally at the end of the certificate preparation, inside setter method setDEREncoded().</p>
		<p>
		@see it::plio::oxsit::ext::security::cert::QualifiedCertificate
			For a description of the suggested method to use this interface.
		</p>
		*/
		void setCertificateComplianceControlObject([in] it::plio::ext::oxsit::security::cert::XOX_CertificateComplianceProcedure arg0)
						raises( ::com::sun::star::lang::IllegalArgumentException,
								::com::sun::star::uno::Exception );

		/** Sets the interface object used to check for the certificate revocation state (CRL, OSP).
		*/
		void setRevocationStateControlObject([in]  it::plio::ext::oxsit::security::cert::XOX_CertificateRevocationStateProcedure arg0)
						raises( ::com::sun::star::lang::IllegalArgumentException,
								::com::sun::star::uno::Exception );

		/** Sets the interface object used to check for the certificate certification path.
		*/
		void setCertificationPathControlObject([in]  it::plio::ext::oxsit::security::cert::XOX_CertificationPathProcedure arg0)
						raises( ::com::sun::star::lang::IllegalArgumentException,
								::com::sun::star::uno::Exception );

		/** verify the state of this certificate. Returns false if not OK, true if OK.
		 <p>Either cases, the CertificateState and CertificateAutority fields will have the result.</p>
		 <p>The CertificateGraficStateValue field will have the result as well</p>
		 @param aFrame the frame used for GUI if needed in the procedures<br>
		 		if the parameter is null, there will be no GUI
		 </p>
		*/
		void verifyCertificate( [in] com::sun::star::frame::XFrame aFrame);

		/** control the certificate compiance of the UNO component passed as a parameter.
			the XComponent passed as a parameter must have the XOX_QualifiedInterface available
			for executing the function. 
		 <p>
		 @param aFrame the frame used for GUI if needed in the procedures<br>
		 		if the parameter is null, there will be no GUI
		@param xCertificate the certificate to be verified		 		
		 </p>
		  */
		void verifyCertificateCompliance([in] com::sun::star::frame::XFrame xFrame )
						raises( ::com::sun::star::lang::IllegalArgumentException,
								::com::sun::star::uno::Exception );

		/** Control the certification revocation state, may be implemented using CRL control or using OCSP
		(Online Certificate Status Protocol).
		 <p>
		 @param xFrame the frame used for GUI if needed in the procedures<br>
		 		if the parameter is null, there will be no GUI
		@param xCertificate the certificate to be verified		 		
		 </p>
		*/
		void verifyCertificateRevocationState( [in] com::sun::star::frame::XFrame xFrame)
						raises( ::com::sun::star::lang::IllegalArgumentException,
								::com::sun::star::uno::Exception );
		/** control the certification path of the UNO component passed as a parameter.
			the XComponent passed as a parameter must have the XOX_QualifiedInterface available
			for executing the function.
		 <p>
		 @param xFrame the frame used for GUI if needed in the procedures<br>
		 		if the parameter is null, there will be no GUI
		@param xCertificate the certificate to be verified		 		
		 </p>
		*/
		void verifyCertificationPath( [in] com::sun::star::frame::XFrame xFrame )
						raises( ::com::sun::star::lang::IllegalArgumentException,
								::com::sun::star::uno::Exception );
	} ;

  }; }; }; }; };  };
 
#endif
